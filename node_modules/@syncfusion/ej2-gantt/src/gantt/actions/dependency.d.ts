/**
 * Predecessor calculation goes here
 */
import { IGanttData, ITaskData, IPredecessor } from '../base/interface';
import { Gantt } from '../base/gantt';
import { Dialog } from '@syncfusion/ej2-popups';
export declare class Dependency {
    private parent;
    private dateValidateModule;
    validationPredecessor: IPredecessor[];
    /** @private */
    confirmPredecessorDialog: Dialog;
    /** @private */
    predecessorIndex: number;
    /** @private */
    childRecord: IGanttData;
    constructor(gantt: Gantt);
    /**
     * Method to populate predecessor collections in records
     * @private
     */
    ensurePredecessorCollection(): void;
    /**
     *
     * @param ganttData
     * @param ganttProp
     * @private
     */
    ensurePredecessorCollectionHelper(ganttData: IGanttData, ganttProp: ITaskData): void;
    /**
     *
     * @param ganttData Method to check parent dependency in predecessor
     * @param fromId
     */
    private checkIsParent;
    /**
     * Get predecessor collection object from predecessor string value
     * @param predecessorValue
     * @param ganttRecord
     * @private
     */
    calculatePredecessor(predecessorValue: string | number, ganttRecord?: IGanttData): IPredecessor[];
    /**
     * Get predecessor value as string with offset values
     * @param data
     * @private
     */
    getPredecessorStringValue(data: IGanttData): string;
    private getOffsetDurationUnit;
    /**
     * Update predecessor object in both from and to tasks collection
     * @private
     */
    updatePredecessors(): void;
    /**
     * To update predecessor collection to successor tasks
     * @param ganttRecord
     * @param predecessorsCollection
     * @private
     */
    updatePredecessorHelper(ganttRecord: IGanttData, predecessorsCollection?: IGanttData[]): void;
    /**
     * Method to validate date of tasks with predecessor values for all records
     * @private
     */
    updatedRecordsDateByPredecessor(): void;
    /**
     * To validate task date values with dependency
     * @param ganttRecord
     * @private
     */
    validatePredecessorDates(ganttRecord: IGanttData): void;
    /**
     * Method to validate task with predecessor
     * @param parentGanttRecord
     * @param childGanttRecord
     */
    private validateChildGanttRecord;
    /**
     *
     * @param ganttRecord
     * @param predecessorsCollection
     */
    private getPredecessorDate;
    /**
     * Get validated start date as per predecessor type
     * @param ganttRecord
     * @param parentGanttRecord
     * @param predecessor
     */
    private getValidatedStartDate;
    /**
     *
     * @param date
     * @param predecessor
     * @param isMilestone
     * @param record
     */
    private updateDateByOffset;
    /**
     *
     * @param records
     * @private
     */
    createConnectorLinesCollection(records: IGanttData[]): void;
    /**
     *
     * @param predecessorsCollection
     */
    private addPredecessorsCollection;
    /**
     *
     * @param childGanttRecord
     * @param previousValue
     * @param validationOn
     * @private
     */
    validatePredecessor(childGanttRecord: IGanttData, previousValue: IPredecessor[], validationOn: string): void;
    /**
     * Predecessor link validation dialog template
     * @param args
     * @private
     */
    validationDialogTemplate(args: object): HTMLElement;
    /**
     * To render validation dialog
     * @return {void}
     * @private
     */
    renderValidationDialog(): void;
    private validationDialogOkButton;
    private validationDialogCancelButton;
    private validationDialogClose;
    /**
     * Validate and apply the predecessor option from validation dialog
     * @param buttonType
     * @return {void}
     * @private
     */
    applyPredecessorOption(): void;
    private calculateOffset;
    /**
     * Update predecessor value with user selection option in predecessor validation dialog
     * @param args
     * @return {void}
     */
    private removePredecessors;
    /**
     * To open predecessor validation dialog
     * @param args
     * @return {void}
     * @private
     */
    openValidationDialog(args: object): void;
    /**
     * Method to get validate able predecessor alone from record
     * @param record
     * @private
     */
    getValidPredecessor(record: IGanttData): IPredecessor[];
    /**
     * To validate the types while editing the taskbar
     * @param args
     * @return {boolean}
     * @private
     */
    validateTypes(ganttRecord: IGanttData): object;
    /**
     * Method to remove and update new predecessor collection in successor record
     * @param data
     * @private
     */
    addRemovePredecessor(data: IGanttData): void;
    /**
     * Method to remove a predecessor from a record.
     * @param childRecord
     * @param index
     * @private
     */
    removePredecessor(childRecord: IGanttData, index: number): void;
    /**
     * To render predecessor delete confirmation dialog
     * @return {void}
     * @private
     */
    renderPredecessorDeleteConfirmDialog(): void;
    private confirmCloseDialog;
    private confirmOkDeleteButton;
}
