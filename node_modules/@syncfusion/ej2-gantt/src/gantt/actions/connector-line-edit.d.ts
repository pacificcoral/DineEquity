import { Gantt } from '../base/gantt';
import { IGanttData, IPredecessor, IConnectorLineObject } from '../base/interface';
/**
 * File for handling connector line edit operation in Gantt.
 */
export declare class ConnectorLineEdit {
    private parent;
    private connectorLineElement;
    constructor(ganttObj?: Gantt);
    /**
     * To update connector line edit element.
     * @return {void}
     * @private
     */
    updateConnectorLineEditElement(e: PointerEvent): void;
    /**
     * To get hovered connector line element.
     * @return {void}
     * @private
     */
    private getConnectorLineHoverElement;
    /**
     * To highlight connector line while hover.
     * @return {void}
     * @private
     */
    private highlightConnectorLineElements;
    /**
     * To add connector line highlight class.
     * @return {void}
     * @private
     */
    private addHighlight;
    /**
     * To remove connector line highlight class.
     * @return {void}
     * @private
     */
    private removeHighlight;
    /**
     * To remove connector line highlight class.
     * @return {void}
     * @private
     */
    getEditedConnectorLineString(records: IGanttData[]): string;
    /**
     * To refresh connector line object collections
     * @param parentGanttRecord
     * @param childGanttRecord
     * @param predecessor
     * @private
     */
    updateConnectorLineObject(parentGanttRecord: IGanttData, childGanttRecord: IGanttData, predecessor: IPredecessor): IConnectorLineObject;
    /**
     * Tp refresh connector lines of edited records
     * @param editedRecord
     * @private
     */
    refreshEditedRecordConnectorLine(editedRecord: IGanttData[]): void;
    /**
     * Method to remove connector line from DOM
     * @param records
     * @private
     */
    removePreviousConnectorLines(records: IGanttData[] | object): void;
    private removeConnectorLineById;
    private idFromPredecessor;
    private predecessorValidation;
    /**
     * To validate predecessor relations
     * @param ganttRecord
     * @param predecessorString
     * @private
     */
    validatePredecessorRelation(ganttRecord: IGanttData, predecessorString: string): boolean;
    /**
     * To add dependency for Task
     * @param ganttRecord
     * @param predecessorString
     * @private
     */
    addPredecessor(ganttRecord: IGanttData, predecessorString: string): void;
    /**
     * To remove dependency from task
     * @param ganttRecord
     * @private
     */
    removePredecessor(ganttRecord: IGanttData): void;
    /**
     * To modify current dependency values of Task
     * @param ganttRecord
     * @param predecessorString
     * @private
     */
    updatePredecessor(ganttRecord: IGanttData, predecessorString: string): boolean;
    private updatePredecessorHelper;
    private checkParentRelation;
}
