import { L10n, createElement } from '@syncfusion/ej2-base';
import { DialogUtility } from '@syncfusion/ej2-popups';
import { XmlHttpRequestHandler } from '../../base/ajax-helper';
/**
 * @private
 */
var EnforceProtectionDialog = /** @class */ (function () {
    function EnforceProtectionDialog(viewer, owner) {
        var _this = this;
        /**
         * @private
         */
        this.show = function () {
            _this.localeValue = new L10n('documenteditor', _this.viewer.owner.defaultLocale);
            _this.localeValue.setLocale(_this.viewer.owner.locale);
            if (!_this.target) {
                _this.initDialog(_this.localeValue, _this.viewer.owner.enableRtl);
            }
            _this.viewer.dialog.header = _this.localeValue.getConstant('Start Enforcing Protection');
            _this.viewer.dialog.height = 'auto';
            _this.viewer.dialog.content = _this.target;
            _this.viewer.dialog.width = 'auto';
            _this.viewer.dialog.buttons = [{
                    click: _this.okButtonClick,
                    buttonModel: { content: _this.localeValue.getConstant('Ok'), cssClass: 'e-flat', isPrimary: true }
                },
                {
                    click: _this.hideDialog,
                    buttonModel: { content: _this.localeValue.getConstant('Cancel'), cssClass: 'e-flat' }
                }];
            _this.passwordTextBox.value = '';
            _this.confirmPasswordTextBox.value = '';
            _this.viewer.dialog.show();
        };
        this.hideDialog = function () {
            _this.passwordTextBox.value = '';
            _this.confirmPasswordTextBox.value = '';
            _this.viewer.dialog.hide();
        };
        /**
         * @private
         */
        this.okButtonClick = function () {
            if (_this.passwordTextBox.value !== _this.confirmPasswordTextBox.value) {
                /* tslint:disable */
                DialogUtility.alert("The password don't match");
                /* tslint:enable */
            }
            else {
                _this.password = _this.passwordTextBox.value;
                var passwordBase64 = _this.owner.base64.encodeString(_this.password);
                /* tslint:disable:no-any */
                var formObject = {
                    passwordBase64: passwordBase64,
                    saltBase64: '',
                    spinCount: 100000
                };
                /* tslint:enable:no-any */
                var url = _this.viewer.owner.serviceUrl + _this.viewer.owner.serverActionSettings.restrictEditing;
                _this.enforceProtectionHandler.url = url;
                _this.enforceProtectionHandler.contentType = 'application/json;charset=UTF-8';
                _this.enforceProtectionHandler.onSuccess = _this.enforceProtection.bind(_this);
                _this.enforceProtectionHandler.onFailure = _this.failureHandler.bind(_this);
                _this.enforceProtectionHandler.onError = _this.failureHandler.bind(_this);
                _this.enforceProtectionHandler.send(formObject);
            }
        };
        this.viewer = viewer;
        this.owner = owner;
        this.enforceProtectionHandler = new XmlHttpRequestHandler();
    }
    /**
     * @private
     */
    EnforceProtectionDialog.prototype.initDialog = function (localValue, isRtl) {
        var instance = this;
        var id = this.viewer.owner.containerId + '_enforce_protection';
        this.target = createElement('div', { id: id, className: 'e-de-enforce' });
        var container = createElement('div');
        // tslint:disable-next-line:max-line-length
        var newPassWord = createElement('div', { className: 'e-de-enforce-dlg-title', innerHTML: localValue.getConstant('Enter new password') });
        // tslint:disable-next-line:max-line-length
        this.passwordTextBox = createElement('input', { attrs: { type: 'password', autofocus: 'true' }, id: this.viewer.owner.containerId + '_display_text', className: 'e-input e-de-enforce-dlg-input' });
        // this.passwordTextBox.addEventListener('keyup', instance.onKeyUpOnDisplayBox);
        container.appendChild(newPassWord);
        container.appendChild(this.passwordTextBox);
        // tslint:disable-next-line:max-line-length
        var confirmPassword = createElement('div', { className: 'e-de-enforce-dlg-title', innerHTML: localValue.getConstant('Reenter new password to confirm') });
        // tslint:disable-next-line:max-line-length
        this.confirmPasswordTextBox = createElement('input', { attrs: { type: 'password' }, id: this.viewer.owner.containerId + '_url_text', className: 'e-input e-de-enforce-dlg-input' });
        container.appendChild(confirmPassword);
        container.appendChild(this.confirmPasswordTextBox);
        this.target.appendChild(container);
    };
    /* tslint:disable:no-any */
    EnforceProtectionDialog.prototype.failureHandler = function (result) {
        if (result.name === 'onError') {
            DialogUtility.alert(this.localeValue.getConstant('Error in establishing connection with web server'));
        }
        else {
            console.error(result.statusText);
        }
    };
    EnforceProtectionDialog.prototype.enforceProtection = function (result) {
        var data = JSON.parse(result.data);
        this.viewer.saltValue = data[0];
        this.viewer.hashValue = data[1];
        this.protectDocument();
    };
    /* tslint:enable:no-any */
    EnforceProtectionDialog.prototype.protectDocument = function () {
        this.viewer.owner.editor.protect(this.owner.protectionType);
        this.viewer.restrictFormatting = this.owner.restrictFormatting;
        this.viewer.restrictEditingPane.showStopProtectionPane(true);
        this.viewer.restrictEditingPane.loadPaneValue();
        this.viewer.dialog.hide();
    };
    return EnforceProtectionDialog;
}());
export { EnforceProtectionDialog };
/**
 * @private
 */
var UnProtectDocumentDialog = /** @class */ (function () {
    function UnProtectDocumentDialog(viewer, owner) {
        var _this = this;
        /**
         * @private
         */
        this.show = function () {
            _this.localObj = new L10n('documenteditor', _this.viewer.owner.defaultLocale);
            _this.localObj.setLocale(_this.viewer.owner.locale);
            if (!_this.target) {
                _this.initDialog(_this.localObj, _this.viewer.owner.enableRtl);
            }
            _this.viewer.dialog.header = 'Unprotect Document';
            _this.viewer.dialog.height = 'auto';
            _this.viewer.dialog.width = 'auto';
            _this.viewer.dialog.content = _this.target;
            _this.viewer.dialog.buttons = [{
                    click: _this.okButtonClick,
                    buttonModel: { content: _this.localObj.getConstant('Ok'), cssClass: 'e-flat', isPrimary: true }
                },
                {
                    click: _this.hideDialog,
                    buttonModel: { content: _this.localObj.getConstant('Cancel'), cssClass: 'e-flat' }
                }];
            _this.viewer.dialog.dataBind();
            _this.passwordTextBox.value = '';
            _this.viewer.dialog.show();
        };
        /**
         * @private
         */
        /* tslint:disable:no-any */
        this.okButtonClick = function () {
            if (_this.passwordTextBox.value === '') {
                return;
            }
            var password = _this.passwordTextBox.value;
            var passwordBase64 = _this.owner.base64.encodeString(password);
            var formObject = {
                passwordBase64: passwordBase64,
                saltBase64: _this.viewer.saltValue,
                spinCount: 100000
            };
            _this.unProtectDocumentHandler.url = _this.viewer.owner.serviceUrl + _this.viewer.owner.serverActionSettings.restrictEditing;
            _this.unProtectDocumentHandler.contentType = 'application/json;charset=UTF-8';
            _this.unProtectDocumentHandler.onSuccess = _this.onUnProtectionSuccess.bind(_this);
            _this.unProtectDocumentHandler.onFailure = _this.failureHandler.bind(_this);
            _this.unProtectDocumentHandler.onError = _this.failureHandler.bind(_this);
            _this.unProtectDocumentHandler.send(formObject);
        };
        /**
         * @private
         */
        this.hideDialog = function () {
            _this.passwordTextBox.value = '';
            _this.viewer.dialog.hide();
        };
        this.viewer = viewer;
        this.owner = owner;
        this.unProtectDocumentHandler = new XmlHttpRequestHandler;
    }
    /**
     * @private
     */
    UnProtectDocumentDialog.prototype.initDialog = function (localValue, isRtl) {
        var instance = this;
        var id = this.viewer.owner.containerId + '_enforce_protection';
        this.target = createElement('div', { id: id, className: 'e-de-enforce' });
        var container = createElement('div');
        var newPassWord = createElement('div', {
            className: 'e-de-unprotect-dlg-title',
            innerHTML: localValue.getConstant('Password')
        });
        this.passwordTextBox = createElement('input', {
            attrs: { type: 'password' },
            id: this.viewer.owner.containerId + '_display_text', className: 'e-input e-de-enforce-dlg-input'
        });
        // this.passwordTextBox.addEventListener('keyup', instance.onKeyUpOnDisplayBox);
        container.appendChild(newPassWord);
        container.appendChild(this.passwordTextBox);
        this.target.appendChild(container);
    };
    UnProtectDocumentDialog.prototype.onUnProtectionSuccess = function (result) {
        var encodeString = JSON.parse(result.data);
        this.currentHashValue = encodeString[1];
        this.currentSaltValue = encodeString[0];
        this.validateHashValue();
    };
    UnProtectDocumentDialog.prototype.failureHandler = function (result) {
        if (result.name === 'onError') {
            DialogUtility.alert(this.localObj.getConstant('Error in establishing connection with web server'));
        }
        else {
            console.error(result.statusText);
        }
    };
    /* tslint:enable:no-any */
    UnProtectDocumentDialog.prototype.validateHashValue = function () {
        var decodeUserHashValue = this.owner.base64.decodeString(this.currentHashValue);
        var documentHashValue = this.viewer.hashValue;
        var defaultHashValue = this.owner.base64.decodeString(documentHashValue);
        var stopProtection = true;
        if (decodeUserHashValue.length === defaultHashValue.length) {
            for (var i = 0; i < decodeUserHashValue.length; i++) {
                if (decodeUserHashValue[i] !== defaultHashValue[i]) {
                    stopProtection = false;
                    break;
                }
            }
        }
        else {
            stopProtection = false;
        }
        if (stopProtection) {
            this.viewer.restrictEditingPane.showStopProtectionPane(false);
            this.viewer.isDocumentProtected = false;
            this.viewer.restrictFormatting = false;
            this.viewer.selection.highlightEditRegion();
            this.viewer.dialog.hide();
        }
        else {
            DialogUtility.alert(this.localObj.getConstant('The password is incorrect'));
        }
    };
    return UnProtectDocumentDialog;
}());
export { UnProtectDocumentDialog };
